type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CodeSharingPlatformTest.java
  visible: false
  text: |
    import com.google.gson.JsonArray;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.PresentationError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.jsoup.Jsoup;
    import org.jsoup.nodes.Document;
    import org.jsoup.nodes.Element;
    import org.jsoup.select.Elements;
    import platform.CodeSharingPlatform;

    import java.util.HashMap;
    import java.util.Map;

    import static org.hyperskill.hstest.common.Utils.sleep;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isNumber;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class CodeSharingPlatformTest extends SpringTest {
        public CodeSharingPlatformTest() {
            super(CodeSharingPlatform.class, "../snippets.mv.db");
        }

        final String API_CODE = "/api/code/";
        final String WEB_CODE = "/code/";

        final String API_CODE_NEW = "/api/code/new";
        final String WEB_CODE_NEW = "/code/new";

        final String API_LATEST = "/api/code/latest";
        final String WEB_LATEST = "/code/latest";

        final String[] SNIPPETS = {
            "public static void ...",
            "class Code { ...",
            "Snippet #3",
            "Snippet #4",
            "Snippet #5",
            "Snippet #6",
            "Snippet #7",
            "Snippet #8",
            "Snippet #9",
            "Snippet #10",
            "Snippet #11",
            "Snippet #12",
            "Snippet #13",
            "Snippet #14",

            "Snippet #15",
            "Snippet #16",
            "Snippet #17",
            "Snippet #18",
            "Snippet #19",
            "Snippet #20",
            "Snippet #21",
            "Snippet #22",
        };

        final Map<Integer, String> ids = new HashMap<>();
        final Map<Integer, String> dates = new HashMap<>();
        final Map<Integer, Integer> secs = new HashMap<>();
        final Map<Integer, Integer> views = new HashMap<>();

        boolean checkSecret = false;
        long freezeTime = 0;
        long awaitTime = 0;
        long sleepDurationSec = 0;
        long sleepLowerBound = 0;
        long sleepUpperBound = 0;

        static String th(int val) {
            if (val == 1) {
                return "" + val + "st";
            } else if (val == 2) {
                return "" + val + "nd";
            } else if (val == 3) {
                return "" + val + "rd";
            } else {
                return "" + val + "th";
            }
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        static void checkTitle(Document doc, String url, String title) {
            if (!doc.title().equals(title)) {
                throw new WrongAnswer("GET " + url +
                    " should contain title \"" + title + "\"");
            }
        }

        static Element getSingleTag(Element doc, String url, String tag) {
            Elements elems = getElemsByTag(doc, url, tag, 1);
            return elems.get(0);
        }

        static Elements getElemsByTag(Element doc, String url, String tag, int length) {
            Elements elems = doc.getElementsByTag(tag);
            if (elems.size() != length) {
                throw new WrongAnswer("GET " + url +
                    " should contain " + length + " <" + tag + "> " +
                    "element"+ (length == 1 ? "" : "s") +", found: " + elems.size());
            }
            return elems;
        }

        static Element getById(Element doc, String url, String id, String tag) {
            Element elem = doc.getElementById(id);

            if (elem == null) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id \"" + id + "\", no one found");
            }

            if (!elem.tagName().equals(tag)) {
                throw new WrongAnswer("GET " + url +
                    " should contain an element with id  \"" + id + "\" and tag \"" + tag + "\", " +
                    "found another tag: \"" + elem.tagName() + "\"");
            }

            return elem;
        }

        static void checkMissingId(Element doc, String url, String id) {
            Element elem = doc.getElementById(id);
            if (elem != null) {
                throw new WrongAnswer("GET " + url +
                    " shouldn't contain an element with id \"" + id + "\", but one was found");
            }
        }

        @DynamicTestingMethod
        public DynamicTesting[] dt = new DynamicTesting[] {
            // test 1
            this::checkWebCodeNew,

            // test 2
            () -> postSnippet(0),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiLatest(0),
            () -> checkWebLatest(0),

            // test 7
            () -> postSnippet(1),
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiLatest(1, 0),
            () -> checkWebLatest(1, 0),

            // test 14
            () -> postSnippet(2),
            () -> postSnippet(3),
            () -> postSnippet(4),
            () -> postSnippet(5),
            () -> postSnippet(6),
            () -> postSnippet(7),
            () -> postSnippet(8),
            () -> postSnippet(9),
            () -> postSnippet(10),
            () -> postSnippet(11),
            () -> postSnippet(12),
            () -> postSnippet(13),

            // test 26
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 54
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 56
            this::reloadServer,

            // test 57
            () -> checkApiCode(0),
            () -> checkWebCode(0),
            () -> checkApiCode(1),
            () -> checkWebCode(1),
            () -> checkApiCode(2),
            () -> checkWebCode(2),
            () -> checkApiCode(3),
            () -> checkWebCode(3),
            () -> checkApiCode(4),
            () -> checkWebCode(4),
            () -> checkApiCode(5),
            () -> checkWebCode(5),
            () -> checkApiCode(6),
            () -> checkWebCode(6),
            () -> checkApiCode(7),
            () -> checkWebCode(7),
            () -> checkApiCode(8),
            () -> checkWebCode(8),
            () -> checkApiCode(9),
            () -> checkWebCode(9),
            () -> checkApiCode(10),
            () -> checkWebCode(10),
            () -> checkApiCode(11),
            () -> checkWebCode(11),
            () -> checkApiCode(12),
            () -> checkWebCode(12),
            () -> checkApiCode(13),
            () -> checkWebCode(13),

            // test 85
            () -> checkApiLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),
            () -> checkWebLatest(13, 12, 11, 10, 9, 8, 7, 6, 5, 4),

            // test 87
            () -> postSnippet(14),
            () -> postSnippet(15, 100, 20),
            () -> postSnippet(16),
            () -> postSnippet(17, 0, 5),
            () -> postSnippet(18),
            () -> postSnippet(19, 3, 0),
            () -> postSnippet(20),
            () -> postSnippet(21, 30, 0),

            // test 95
            () -> checkApiCode(14),
            () -> checkWebCode(14),
            () -> checkApiCode(16),
            () -> checkWebCode(16),
            () -> checkApiCode(18),
            () -> checkWebCode(18),
            () -> checkApiCode(20),
            () -> checkWebCode(20),

            // test 103
            () -> {
                freezeTime = System.currentTimeMillis();
                sleep(5000);
                return reloadServer();
            },

            // test 104
            () -> {
                awaitTime = System.currentTimeMillis();
                sleepDurationSec = (awaitTime - freezeTime) / 1000;
                sleepLowerBound = sleepDurationSec;
                sleepUpperBound = sleepLowerBound + 10;
                checkSecret = true;
                return CheckResult.correct();
            },

            // test 105
            () -> checkApiCode(15),
            () -> checkWebCode(15),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(19),
            () -> checkWebCode404(19),
            () -> checkApiCode(21),
            () -> checkWebCode(21),

            // test 113
            () -> checkApiLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),
            () -> checkWebLatest(20, 18, 16, 14, 13, 12, 11, 10, 9, 8),

            // test 115
            () -> checkApiCode(17),
            () -> checkApiCode(17),
            () -> checkWebCode(17),
            () -> checkApiCode404(17),
            () -> checkWebCode404(17),
        };

        private CheckResult checkApiCode(int id) {
            String codeId = ids.get(id);
            String snippet = SNIPPETS[id];
            int time = secs.get(id);
            int views = this.views.get(id);

            HttpResponse resp = get(API_CODE + codeId).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("code", snippet)
                    .value("date", isString(s -> {
                        if (dates.containsKey(id)) {
                            return s.equals(dates.get(id));
                        }
                        dates.put(id, s);
                        return true;
                    }))
                    .value("time", isInteger(i -> {
                        if (!checkSecret || time == 0) {
                            return i == 0;
                        }
                        int upperBound = (int) (time - sleepLowerBound);
                        int lowerBound = (int) (time - sleepUpperBound);
                        return i >= lowerBound && i <= upperBound;
                    }))
                    .value("views", isInteger(i -> {
                        if (!checkSecret || views == 0) {
                            return i == 0;
                        }
                        boolean result = i == views - 1;
                        this.views.put(id, views - 1);
                        return result;
                    }))

            );

            return CheckResult.correct();
        }

        private CheckResult checkApiCode404(int id) {
            HttpResponse resp = get(API_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCode(int id) {
            String codeId = ids.get(id);
            String apiSnippet = SNIPPETS[id];
            String apiDate = dates.get(id);
            int time = secs.get(id);
            int views = this.views.get(id);

            String req = WEB_CODE + codeId;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Code");

            Element pre = getById(doc, req, "code_snippet", "pre");
            Element code = getSingleTag(pre, req, "code");

            String webSnippetCode = code.text();
            if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                return CheckResult.wrong("Web code snippet " +
                    "and api code snippet are different");
            }

            Element date = getById(doc, req, "load_date", "span");
            String webSnippetDate = date.text();
            if (!webSnippetDate.trim().equals(apiDate.trim())) {
                return CheckResult.wrong("Web snippet date " +
                    "and api snippet date are different");
            }

            if (time != 0) {
                Element timeSpan = getById(doc, req, "time_restriction", "span");
                String timeText = timeSpan.text();
                int timeOnPage;
                try {
                    timeOnPage = expect(timeText).toContain(1).integers().get(0);
                } catch (PresentationError ex) {
                    return CheckResult.wrong(
                        "GET " + req + " cannot find number of seconds inside \"time_restriction\" span element.\n" +
                        "Full text:\n" + timeSpan
                    );
                }
                int upperBound = (int) (time - sleepLowerBound);
                int lowerBound = (int) (time - sleepUpperBound);

                if (!(timeOnPage >= lowerBound && timeOnPage <= upperBound)) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain time restriction between " + lowerBound
                        + " and " + upperBound + ", found: " + timeOnPage + "\n" +
                        "Full text:\n" + timeSpan);
                }
            } else {
                checkMissingId(doc, req, "time_restriction");
            }

            if (views != 0) {
                Element viewsSpan = getById(doc, req, "views_restriction", "span");
                String viewsText = viewsSpan.text();
                int viewsOnPage = expect(viewsText).toContain(1).integers().get(0);

                if (viewsOnPage != views - 1) {
                    return CheckResult.wrong("GET " + req + " should " +
                        "contain views restriction equal to " + (views - 1)
                        + ", found: " + viewsOnPage + "\n" +
                        "Full text:\n" + viewsSpan);
                }
                this.views.put(id, views - 1);
            } else {
                checkMissingId(doc, req, "views_restriction");
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebCode404(int id) {
            HttpResponse resp = get(WEB_CODE + ids.get(id)).send();
            checkStatusCode(resp, 404);
            return CheckResult.correct();
        }

        private CheckResult checkWebCodeNew() {
            HttpResponse resp = get(WEB_CODE_NEW).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, WEB_CODE_NEW, "Create");

            getById(doc, WEB_CODE_NEW, "code_snippet", "textarea");
            getById(doc, WEB_CODE_NEW, "send_snippet", "button");

            return CheckResult.correct();
        }

        private CheckResult postSnippet(int id) {
            return postSnippet(id, 0, 0);
        }

        private CheckResult postSnippet(int id, int secs, int views) {
            String snippet = SNIPPETS[id];
            this.secs.put(id, secs);
            this.views.put(id, views);

            HttpResponse resp = post(API_CODE_NEW,
                "{\"code\":\"" + snippet + "\", " +
                    "\"time\": " + secs +", " +
                    "\"views\": " + views + "}").send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isString(i -> {
                        if (i.length() != 36) {
                            return false;
                        }
                        ids.put(id, "" + i);
                        return true;
                    }))
            );

            return CheckResult.correct();
        }

        private CheckResult checkApiLatest(int... ids) {
            String req = API_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(ids.length, isObject()
                    .value("code", isString())
                    .value("date", isString())
                    .value("time", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                    .value("views", isInteger(i -> i == 0,
                        "should be equal to 0 (latest snippets should not contain time restrictions)"))
                )
            );

            JsonArray elem = resp.getJson().getAsJsonArray();
            for (int i = 0; i < ids.length; i++) {
                JsonObject item = elem.get(i).getAsJsonObject();

                String actualSnippet = SNIPPETS[ids[i]];
                String actualDate = dates.get(ids[i]);

                String givenSnippet = item.get("code").getAsString();
                String givenDate = item.get("date").getAsString();

                if (!actualSnippet.equals(givenSnippet)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet doesn't match actual snippet.\n" +
                        "Expected:\n" + actualSnippet + "\n" +
                        "Found:\n" + givenSnippet);
                }

                if (!actualDate.equals(givenDate)) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1) +
                        " snippet's date doesn't match actual snippet's date.\n" +
                        "Expected:\n" + actualDate + "\n" +
                        "Found:\n" + givenDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult checkWebLatest(int... ids) {
            String req = WEB_LATEST;
            HttpResponse resp = get(req).send();
            checkStatusCode(resp, 200);

            String html = resp.getContent();
            Document doc = Jsoup.parse(html);

            checkTitle(doc, req, "Latest");

            Elements preList = getElemsByTag(doc, req, "pre", ids.length);
            Elements spanList = getElemsByTag(doc, req, "span", ids.length);

            for (int i = 0; i < ids.length; i++) {
                String apiSnippet = SNIPPETS[ids[i]];
                String apiDate = dates.get(ids[i]);
                Element pre = preList.get(i);

                String webSnippetCode = pre.text();
                if (!webSnippetCode.trim().equals(apiSnippet.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet doesn't match " + th(i + 1) + " snippet via api.\n" +
                        "Expected:\n" + apiSnippet + "\n" +
                        "Found:\n" + webSnippetCode);
                }

                Element date = spanList.get(i);
                String webSnippetDate = date.text();
                if (!webSnippetDate.trim().equals(apiDate.trim())) {
                    return CheckResult.wrong("GET " + req + " " + th(i + 1)
                        + " snippet's date doesn't match " + th(i + 1)
                        + " snippet's date via api.\n" +
                        "Expected:\n" + apiDate + "\n" +
                        "Found:\n" + webSnippetDate);
                }
            }

            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new RuntimeException(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/resources/application-hsqldb.yaml
  visible: true
  learner_created: true
- name: src/resources/static/js/initSnippets.js
  visible: true
  text: |-
    function initSnippets() {
        let snippets = document.querySelectorAll("#snippet")
        snippets.forEach((snippet) => {
            let codeSnippet = snippet.querySelector("#code_snippet code");
            let highlightedCode = hljs.highlightAuto(codeSnippet.textContent);
            codeSnippet.innerHTML = highlightedCode.value;
            snippet.querySelector("#language_name").innerText = "language: " + highlightedCode.language;
        })
    }
  learner_created: true
- name: src/platform/presentation/entity/ApiErrorResponseJBean.java
  visible: true
  text: |
    package platform.presentation.entity;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.io.Serializable;

    public class ApiErrorResponseJBean implements Serializable {

        private String message;
        private String date;

        @JsonProperty
        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }

        @JsonProperty
        public String getDate() {
            return date;
        }

        public void setDate(String date) {
            this.date = date;
        }

        @Override
        public String toString() {
            return "ApiErrorResponseJBean{" +
                    "message='" + message + '\'' +
                    ", date=" + date +
                    '}';
        }
    }
  learner_created: true
- name: src/platform/presentation/api/CodeSharingAPI.java
  visible: true
  text: |
    package platform.presentation.api;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.web.bind.annotation.*;
    import platform.presentation.entity.CodeJBean;

    import java.util.Collection;
    import java.util.Map;

    @RequestMapping("/api/code")
    public interface CodeSharingAPI {

        @PostMapping(path = "/new", produces = MediaType.APPLICATION_JSON_VALUE)
        Map<String, Object> createCode(@RequestBody CodeJBean code);

        @PutMapping(path = "/{id}/update")
        @ResponseStatus(HttpStatus.NO_CONTENT)
        void updateCode(
                @PathVariable("id") int id,
                @RequestBody CodeJBean code
        );

        @GetMapping(path = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
        CodeJBean readCode(@PathVariable("id") int id);

        @GetMapping(path = "/latest", produces = MediaType.APPLICATION_JSON_VALUE)
        Collection<CodeJBean> readLatestCode();
    }
  learner_created: true
- name: src/platform/support/springconverter/RuntimeExceptionToApiErrorResponseJBeanConverter.java
  visible: true
  text: |
    package platform.support.springconverter;

    import com.sun.istack.NotNull;
    import org.springframework.core.convert.converter.Converter;
    import org.springframework.stereotype.Component;
    import platform.presentation.entity.ApiErrorResponseJBean;
    import platform.support.formatter.DefaultDateFormatter;

    import java.time.LocalDateTime;

    @Component
    public class RuntimeExceptionToApiErrorResponseJBeanConverter implements Converter<RuntimeException, ApiErrorResponseJBean> {

        @Override
        public ApiErrorResponseJBean convert(@NotNull RuntimeException source) {
            var errorMessage = source.getMessage();

            var apiErrorResponse = new ApiErrorResponseJBean();
            apiErrorResponse.setMessage(errorMessage);
            apiErrorResponse.setDate(DefaultDateFormatter.format(LocalDateTime.now()));

            return apiErrorResponse;
        }
    }
  learner_created: true
- name: src/platform/presentation/entity/CodeJBean.java
  visible: true
  text: |
    package platform.presentation.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.io.Serializable;

    public class CodeJBean implements Serializable {

        private String code;
        private String date;

        @JsonProperty
        public String getCode() {
            return code;
        }

        @JsonProperty
        public void setCode(String code) {
            this.code = code;
        }

        @JsonProperty
        public String getDate() {
            return date;
        }

        @JsonIgnore
        public void setDate(String date) {
            this.date = date;
        }

        @Override
        public String toString() {
            return "CodeJBean{" +
                    "code='" + code + '\'' +
                    ", date='" + date + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/platform/support/formatter/DefaultDateFormatter.java
  visible: true
  text: |
    package platform.support.formatter;

    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;

    public class DefaultDateFormatter {
        private static final String DATE_FORMAT_STRING = "yyyy/dd/MM HH:mm:ss";
        private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(DATE_FORMAT_STRING);

        public static String format(LocalDateTime localDateTime) {
            return localDateTime.format(DATE_FORMATTER);
        }
    }
  learner_created: true
- name: src/platform/presentation/freemarker/CodeSharingHtmlController.java
  visible: true
  text: |
    package platform.presentation.freemarker;

    import org.springframework.http.MediaType;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PathVariable;
    import org.springframework.web.bind.annotation.RequestMapping;

    @RequestMapping("/code")
    public interface CodeSharingHtmlController {

        @GetMapping(path ="/{id}", produces = MediaType.TEXT_HTML_VALUE)
        String getReadCodePage(Model model, @PathVariable("id") int id) ;

        @GetMapping(path = "/new", produces = MediaType.TEXT_HTML_VALUE)
        String getCreateCodePage();

        @GetMapping(path = "/update/{id}", produces = MediaType.TEXT_HTML_VALUE)
        String updateCodePage(Model model, @PathVariable("id") int id);

        @GetMapping(path = "/latest", produces = MediaType.TEXT_HTML_VALUE)
        String getReadLatestCodePage(Model model) ;
    }
  learner_created: true
- name: src/platform/presentation/freemarker/CodeSharingHtmlControllerImpl.java
  visible: true
  text: |
    package platform.presentation.freemarker;

    import freemarker.template.DefaultObjectWrapper;
    import freemarker.template.Version;
    import org.springframework.stereotype.Controller;
    import org.springframework.ui.Model;
    import platform.businesslayer.entity.Code;
    import platform.businesslayer.service.CodeSharingService;

    import java.util.Collection;

    @Controller
    public class CodeSharingHtmlControllerImpl implements CodeSharingHtmlController {

        private final CodeSharingService repository;

        public CodeSharingHtmlControllerImpl(CodeSharingService repository) {
            this.repository = repository;
        }

        @Override
        public String getReadCodePage(Model model, int id)  {
            Code code = repository.readCode(id);
            model.addAttribute("code", code);
            model.addAttribute("statics", new DefaultObjectWrapper(new Version("2.3.29")).getStaticModels());
            return "read_code";
        }

        @Override
        public String getCreateCodePage() {
            return "create_code";
        }

        @Override
        public String updateCodePage(Model model, int id) {
            // TODO: create update code page
            Code code = repository.readCode(id);
            model.addAttribute("code", code);
            model.addAttribute("statics", new DefaultObjectWrapper(new Version("2.3.29")).getStaticModels());
            return "read_code";
        }

        @Override
        public String getReadLatestCodePage(Model model)  {
            Collection<Code> latestCode = repository.readLatestCode();
            model.addAttribute("latestCode", latestCode);
            model.addAttribute("statics", new DefaultObjectWrapper(new Version("2.3.29")).getStaticModels());
            return "read_latest_code";
        }
    }
  learner_created: true
- name: src/platform/businesslayer/service/CodeSharingService.java
  visible: true
  text: |
    package platform.businesslayer.service;

    import platform.businesslayer.entity.Code;

    import java.util.List;

    public interface CodeSharingService {

        int createCode(final Code code);

        void updateCode(final int index, final Code code);

        Code readCode(final int index) ;

        List<Code> readLatestCode(final int quantity) ;

        default List<Code> readLatestCode()  {
            return readLatestCode(10);
        }
    }
  learner_created: true
- name: src/platform/persistance/repository/CodeCrudRepository.java
  visible: true
  text: |
    package platform.persistance.repository;

    import org.springframework.data.repository.CrudRepository;
    import platform.businesslayer.entity.Code;

    public interface CodeCrudRepository extends CrudRepository<Code, Integer> {}
  learner_created: true
- name: src/platform/support/springconverter/CodeJBeanToCodeConverter.java
  visible: true
  text: |
    package platform.support.springconverter;

    import org.springframework.core.convert.converter.Converter;
    import org.springframework.stereotype.Component;
    import platform.presentation.entity.CodeJBean;
    import platform.businesslayer.entity.Code;

    import java.time.LocalDateTime;

    @Component
    public class CodeJBeanToCodeConverter implements Converter<CodeJBean, Code> {

        @Override
        public Code convert(CodeJBean source) {
            var now = LocalDateTime.now();
            var codeString = source.getCode();
            return new Code(codeString, now);
        }
    }
  learner_created: true
- name: src/resources/templates/read_code.ftlh
  visible: true
  text: |-
    <#assign DefaultDateFormatter=statics['platform.support.formatter.DefaultDateFormatter']>

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Code</title>
        <link rel="stylesheet" href="/css/style.css">
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script type="text/javascript" src="/js/initSnippets.js"></script>
    </head>
    <body>
    <div id="snippet">
        <div id="snippet_header">
            <span id="load_date">${DefaultDateFormatter.format(code.date)}</span>
            <span id="language_name">language</span>
        </div>
        <pre id="code_snippet"><code>${code.code}</code></pre>
    </div>
    <script>initSnippets();</script>
    </body>
    </html>
  learner_created: true
- name: src/platform/businesslayer/exception/CodeNotFoundException.java
  visible: true
  text: |
    package platform.businesslayer.exception;

    public class CodeNotFoundException extends RuntimeException {

        private static final String MSG_TEMPLATE = "Code not found by id=%d";

        public CodeNotFoundException(int id) {
            super(String.format(MSG_TEMPLATE, id));
        }
    }
  learner_created: true
- name: src/platform/support/jpaconverter/LocalDateTimeAttributeConverter.java
  visible: true
  text: |
    package platform.support.jpaconverter;

    import javax.persistence.AttributeConverter;
    import javax.persistence.Converter;
    import java.sql.Timestamp;
    import java.time.LocalDateTime;

    @Converter(autoApply = true)
    public class LocalDateTimeAttributeConverter implements AttributeConverter<LocalDateTime, Timestamp> {

        @Override
        public Timestamp convertToDatabaseColumn(LocalDateTime locDateTime) {
            return locDateTime == null ? null : Timestamp.valueOf(locDateTime);
        }

        @Override
        public LocalDateTime convertToEntityAttribute(Timestamp sqlTimestamp) {
            return sqlTimestamp == null ? null : sqlTimestamp.toLocalDateTime();
        }
    }
  learner_created: true
- name: src/platform/presentation/api/CodeSharingAPIImpl.java
  visible: true
  text: |
    package platform.presentation.api;

    import org.springframework.core.convert.ConversionService;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestController;
    import platform.presentation.entity.ApiErrorResponseJBean;
    import platform.presentation.entity.CodeJBean;
    import platform.businesslayer.entity.Code;
    import platform.businesslayer.exception.CodeNotFoundException;
    import platform.businesslayer.service.CodeSharingService;

    import java.util.Collection;
    import java.util.Map;
    import java.util.Objects;
    import java.util.stream.Collectors;

    @RestController
    public class CodeSharingAPIImpl implements CodeSharingAPI {

        private final CodeSharingService service;
        private final ConversionService conversionService;

        public CodeSharingAPIImpl(CodeSharingService service, ConversionService conversionService) {
            this.service = service;
            this.conversionService = conversionService;
        }

        @ExceptionHandler(CodeNotFoundException.class)
        @ResponseStatus(HttpStatus.NOT_FOUND)
        public ApiErrorResponseJBean codeNotFoundExceptionHandler(CodeNotFoundException exception) {
            return conversionService.convert(exception, ApiErrorResponseJBean.class);
        }

        @Override
        public Map<String, Object> createCode(CodeJBean code)  {
            var convertedCode = conversionService.convert(code, Code.class);
            var id = service.createCode(convertedCode);
            var idString = Objects.requireNonNull(conversionService.convert(id, String.class));

            return Map.of("id", idString);
        }

        @Override
        public void updateCode(int id, CodeJBean code) {
            var convertedCode = conversionService.convert(code, Code.class);
            service.updateCode(id, convertedCode);
        }

        @Override
        public CodeJBean readCode(int id)  {
            var code = service.readCode(id);

            return conversionService.convert(code, CodeJBean.class);
        }

        @Override
        public Collection<CodeJBean> readLatestCode()  {
            var latestCode = service.readLatestCode();

            return latestCode.stream()
                    .map(code -> conversionService.convert(code, CodeJBean.class))
                    .collect(Collectors.toList());
        }
    }
  learner_created: true
- name: src/resources/static/js/send.js
  visible: true
  text: |-
    function send() {
        let object = {
            "code": document.getElementById("code_snippet").value
        };
        let json = JSON.stringify(object);
        let xhr = new XMLHttpRequest();
        xhr.open("POST", '/api/code/new', false)
        xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
        xhr.send(json);
        if (xhr.status == 200) {
            alert("Success!");
        }
    }
  learner_created: true
- name: src/platform/businesslayer/entity/Code.java
  visible: true
  text: |
    package platform.businesslayer.entity;

    import javax.persistence.*;
    import java.time.LocalDateTime;

    @Entity
    @Table(name = "codes")
    public class Code {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private int id;

        @Column(name = "code", columnDefinition="nvarchar")
        private String code;

        @Column(name = "date")
        private LocalDateTime date;

        public Code() {
            this.code = null;
            this.date = null;
        }

        public Code(String code, LocalDateTime date) {
            this.code = code;
            this.date = date;
        }

        public Code(int id, String code, LocalDateTime date) {
            this.id = id;
            this.code = code;
            this.date = date;
        }

        public int getId() {
            return id;
        }

        public String getCode() {
            return code;
        }

        public LocalDateTime getDate() {
            return date;
        }
    }
  learner_created: true
- name: src/platform/support/springconverter/CodeToCodeJBeanConverter.java
  visible: true
  text: |
    package platform.support.springconverter;

    import com.sun.istack.NotNull;
    import org.springframework.core.convert.converter.Converter;
    import org.springframework.stereotype.Component;
    import platform.presentation.entity.CodeJBean;
    import platform.support.formatter.DefaultDateFormatter;
    import platform.businesslayer.entity.Code;

    @Component
    public class CodeToCodeJBeanConverter implements Converter<Code, CodeJBean> {

        @Override
        public CodeJBean convert(@NotNull Code source) {
            var dateString = DefaultDateFormatter.format(source.getDate());

            var readCode = new CodeJBean();
            readCode.setDate(dateString);
            readCode.setCode(source.getCode());

            return readCode;
        }
    }
  learner_created: true
- name: src/platform/businesslayer/service/PersistentCodeSharingService.java
  visible: true
  text: |
    package platform.businesslayer.service;

    import org.springframework.context.annotation.Primary;
    import org.springframework.stereotype.Service;
    import platform.businesslayer.entity.Code;
    import platform.businesslayer.exception.CodeNotFoundException;
    import platform.persistance.repository.CodeCrudRepository;

    import java.util.ArrayList;
    import java.util.List;

    @Primary
    @Service
    public class PersistentCodeSharingService implements CodeSharingService {

        private final CodeCrudRepository codeCrudRepository;

        public PersistentCodeSharingService(final CodeCrudRepository codeCrudRepository) {
            this.codeCrudRepository = codeCrudRepository;
        }

        @Override
        public int createCode(final Code code) {
            var savedCode = codeCrudRepository.save(code);
            return savedCode.getId();
        }

        @Override
        public void updateCode(final int index, final Code code) {
            if (!codeCrudRepository.existsById(index)) {
                throw new CodeNotFoundException(index);
            }
            codeCrudRepository.save(new Code(index, code.getCode(), code.getDate()));
        }

        @Override
        public Code readCode(final int index) {
            var code = codeCrudRepository.findById(index);
            if (code.isEmpty()) {
                throw new CodeNotFoundException(index);
            }
            return code.get();
        }

        // FIXME: this implementation breaks if enough entries will be in DB
        @Override
        public List<Code> readLatestCode(final int quantity) {
            var codes = new ArrayList<Code>();
            codeCrudRepository.findAll().forEach(codes::add);
            codes.sort((o1, o2) -> -o1.getDate().compareTo(o2.getDate()));
            return codes.subList(0, Math.min(quantity, codes.size()));
        }
    }
  learner_created: true
- name: src/resources/static/css/style.css
  visible: true
  text: |
    #snippet_header {
        font-size: 0.8rem;
        height: 1.2em;
        display: block;
    }

    #load_date {
        color: green;
        font-family: "Monaco", monospace;
        float: left;
    }

    #language_name {
        color: coral;
        font-family: "Monaco", monospace;
        float: right;
    }

    #snippet {
        margin: 0.5em 0;
    }

    #code_snippet {
        background-color: lightgrey;
        border: solid 0.2em black;
        font-size: 0.8rem;
        font-family: "Monaco", monospace;
    }
  learner_created: true
- name: src/resources/templates/read_latest_code.ftlh
  visible: true
  text: |-
    <#assign DefaultDateFormatter=statics['platform.support.formatter.DefaultDateFormatter']>

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Latest</title>
        <link rel="stylesheet" href="/css/style.css">
        <link rel="stylesheet"
              href="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/styles/default.min.css">
        <script src="//cdn.jsdelivr.net/gh/highlightjs/cdn-release@10.2.1/build/highlight.min.js"></script>
        <script type="text/javascript" src="/js/initSnippets.js"></script>
    </head>
    <body>
    <#list latestCode as code>
        <div id="snippet">
            <div id="snippet_header">
                <span id="load_date">${DefaultDateFormatter.format(code.date)}</span>
                <span id="language_name">language</span>
            </div>
            <pre id="code_snippet"><code>${code.code}</code></pre>
        </div>
    </#list>
    <script>initSnippets();</script>
    </body>
    </html>
  learner_created: true
- name: src/resources/templates/create_code.ftlh
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Create</title>
        <link rel="stylesheet" href="/css/style.css">
        <script type="text/javascript" src="/js/send.js"></script>
    </head>
    <body>
    <form>
        <textarea id="code_snippet">// write your code here</textarea>
        <br>
        <button id="send_snippet" type="submit" onclick=send()>Submit</button>
    </form>
    </body>
    </html>
  learner_created: true
- name: src/resources/application-swagger.yaml
  visible: true
  learner_created: true
- name: src/platform/CodeSharingPlatform.java
  visible: true
  text: |
    package platform;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;
    import org.springframework.web.bind.annotation.RestController;

    @SpringBootApplication
    @RestController
    public class CodeSharingPlatform {

        public static void main(String[] args) {
            SpringApplication.run(CodeSharingPlatform.class, args);
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/11031#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Thu, 13 Oct 2022 12:34:20 UTC
record: -1
